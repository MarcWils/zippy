<div class="accordion-item">
    <h2 class="accordion-header" id="@("header_" + _htmlId)">
        <button class="accordion-button collapsed" type="button"
                data-bs-toggle="collapse"
                data-bs-target="@("#" + _htmlId)"
                aria-expanded="false"
                aria-controls="@_htmlId">
            @if (LocalFileHeader != null)
            {
                @:Local file header (@LocalFileHeader.FileName)
            }
        </button>
    </h2>
    <div id="@_htmlId" class="accordion-collapse collapse" aria-labelledby="@("header_" + _htmlId)">
        <div class="accordion-body">
            @if (LocalFileHeader != null)
            {
                <table class="table table-condensed table-striped table-hover table-bordered">
                    <thead>
                        <tr class="table-light">
                            <th>Property</th>
                            <th>Value</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>Position first byte</td>
                            <td>@LocalFileHeader.PositionFirstByte</td>
                        </tr>
                        <tr>
                            <td>Length</td>
                            <td>@LocalFileHeader.Length</td>
                        </tr>
                    </tbody>
                </table>
                <table class="table table-condensed table-striped table-hover table-bordered">
                    <thead>
                        <tr class="table-light">
                            <th>Field</th>
                            <th>Raw value</th>
                            <th>Display value</th>
                            <th>Explanation</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>Signature</td>
                            <td>@LocalFileHeader.Signature.ToHexString()</td>
                            <td></td>
                            <td>Should always be 0x04034b50 (PK♥♦ or "PK\3\4")</td>
                        </tr>
                        <tr>
                            <td>Version needed to extract</td>
                            <td>@LocalFileHeader.VersionNeededToExtract.ToHexString()</td>
                            <td>@LocalFileHeader.VersionNeededToExtract</td>
                            <td>Minimum version needed to extract</td>
                        </tr>
                        <tr>
                            <td>General purpose bit flag</td>
                            <td>@LocalFileHeader.GeneralPurposeBitFlag.ToHexString()</td>
                            <td>@LocalFileHeader.GeneralPurposeBitFlag.ToBinaryString()</td>
                            <td></td>
                        </tr>
                        <tr>
                            <td>Compression method</td>
                            <td>@LocalFileHeader.CompressionMethod.ToHexString()</td>
                            <td>@LocalFileHeader.CompressionMethod</td>
                            <td>@LocalFileHeader.CompressionMethod.ToCompressionMethod()</td>
                        </tr>
                        <tr>
                            <td>File last modification time</td>
                            <td>@LocalFileHeader.LastModificationFileTime.ToHexString()</td>
                            <td>@LocalFileHeader.LastModificationFileTime.ToTime()</td>
                            <td></td>
                        </tr>
                        <tr>
                            <td>File last modification date</td>
                            <td>@LocalFileHeader.LastModificationFileDate.ToHexString()</td>
                            <td>@LocalFileHeader.LastModificationFileDate.ToDate().ToShortDateString()</td>
                            <td></td>
                        </tr>
                        <tr>
                            <td>CRC-32 of uncompressed data</td>
                            <td>@LocalFileHeader.Crc32.ToHexString()</td>
                            <td>@LocalFileHeader.Crc32</td>
                            <td></td>
                        </tr>
                        <tr>
                            <td>Compressed size</td>
                            <td>@LocalFileHeader.CompressedSize.ToHexString()</td>
                            <td>@LocalFileHeader.CompressedSize.ToReadableFileSize()</td>
                            <td>0xffffffff for ZIP64</td>
                        </tr>
                        <tr>
                            <td>Uncompressed size</td>
                            <td>@LocalFileHeader.UncompressedSize.ToHexString()</td>
                            <td>@LocalFileHeader.UncompressedSize.ToReadableFileSize()</td>
                            <td>0xffffffff for ZIP64</td>
                        </tr>
                        <tr>
                            <td>File name length</td>
                            <td>@LocalFileHeader.FileNameLength.ToHexString()</td>
                            <td>@LocalFileHeader.FileNameLength</td>
                            <td></td>
                        </tr>
                        <tr>
                            <td>Extra field length</td>
                            <td>@LocalFileHeader.ExtraFieldLength.ToHexString()</td>
                            <td>@LocalFileHeader.ExtraFieldLength</td>
                            <td></td>
                        </tr>
                        <tr>
                            <td>File name</td>
                            <td colspan="3">@LocalFileHeader.FileName</td>
                        </tr>
                    </tbody>
                </table>
                @foreach (var extraField in LocalFileHeader.ExtraFields)
                {
                    switch (extraField)
                    {
                        case Zip64ExtraField zip64ef:
                            <Zip64ExtraFieldComponent Zip64ExtraField="zip64ef" />
                            break;
                        case NtfsExtraField nef:
                            <NtfsExtraFieldComponent NtfsExtraField="nef" />
                            break;
                    }
                }
            }
        </div>
    </div>
</div>

@code {
    private string _htmlId = $"lfh-{Guid.NewGuid()}";

    [Parameter]
    public LocalFileHeader? LocalFileHeader { get; set; }
}
