@using Zippy.Site.Extensions;
@typeparam T where T: struct


@if (EditMode)
{
    <input type="text" @bind="NumericValue" id="@_htmlId" aria-describedby="@(_htmlId + "Feedback")" class="@((_error == null? "form-control form-control-sm" : "form-control form-control-sm is-invalid"))" />
     <div id="@(_htmlId + "Feedback")" class="invalid-feedback">
        @_error?.ErrorMessage
    </div>
}
else
{
    <span>@NumericValue</span>
}


@code {
    private T _value;
    private string _htmlId = $"input-{Guid.NewGuid()}";
    private Error? _error;

    [CascadingParameter]
    protected bool EditMode { get; set; }


    [Parameter]
    public NumericDisplayMode DisplayMode { get; set; } = NumericDisplayMode.Hexadecimal;

    [Parameter]
    public T Value
    {
        get { return _value; }
        set
        {
            if (!_value.Equals(value))
            {
                _value = value;
                ValueChanged.InvokeAsync(value);
            }
        }
    }

    [Parameter]
    public EventCallback<T> ValueChanged
    {
        get;
        set;
    }


    private string NumericValue
    {
        get
        {
            return (_error != null)
                ? _error.RawInputValue
                : Value switch
                {
                    ushort ushortValue => DisplayMode switch {
                        NumericDisplayMode.Binary => ushortValue.ToBinaryString(),
                        NumericDisplayMode.Decimal => ushortValue.ToString(),
                        NumericDisplayMode.Hexadecimal => ushortValue.ToHexString(),
                        _ => throw new NotSupportedException()
                    },
                    uint uintValue => DisplayMode switch
                    {
                        NumericDisplayMode.Binary => uintValue.ToBinaryString(),
                        NumericDisplayMode.Decimal => uintValue.ToString(),
                        NumericDisplayMode.Hexadecimal => uintValue.ToHexString(),
                        _ => throw new NotSupportedException()
                    },
                    ulong ulongValue => DisplayMode switch
                    {
                        NumericDisplayMode.Binary => ulongValue.ToBinaryString(),
                        NumericDisplayMode.Decimal => ulongValue.ToString(),
                        NumericDisplayMode.Hexadecimal => ulongValue.ToHexString(),
                        _ => throw new NotSupportedException()
                    },
                    _ => throw new NotSupportedException()
                };
        }
        set
        {
            try
            {
                var newValue = value;
                if (DisplayMode is NumericDisplayMode.Binary && newValue.StartsWith("0b"))
                {
                    newValue = newValue.Remove(0, 2);
                }

                _error = null;
                Value = Value switch
                {
                    ushort => (T)(object)Convert.ToUInt16(newValue, (int)DisplayMode),
                    uint => (T)(object)Convert.ToUInt32(newValue, (int)DisplayMode),
                    ulong => (T)(object)Convert.ToUInt64(newValue, (int)DisplayMode),
                    _ => throw new NotSupportedException()
                };
            }
            catch (Exception ex) when (ex is OverflowException || ex is FormatException)
            {
                _error = new Error(value, ex.Message);
            }
        }
    }








    private class Error
    {
        public Error(string rawInputValue, string errorMessage)
        {
            RawInputValue = rawInputValue ?? throw new ArgumentNullException(nameof(rawInputValue));
            ErrorMessage = errorMessage ?? throw new ArgumentNullException(nameof(errorMessage));
        }
        public string RawInputValue { get; }
        public string ErrorMessage { get; }
    }



}



