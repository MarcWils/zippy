@page "/"
@using System.IO;
@using System.Diagnostics;
@using Zippy.Site.Extensions;
@using Zippy.ZipAnalysis;
@using Zippy.ZipAnalysis.IO;
@using Zippy.ZipAnalysis.Extensions;
@using Zippy.ZipAnalysis.ZipFormat;
@using Microsoft.AspNetCore.Components.Forms;

<div class="text-center pb-5">
    <h1 class="display-4">Welcome to Zippy</h1>
    <span>Note: Zippy works completely in the browser. No data leaves the browser.</span>
</div>

<div class="container">
    <div class="row">
        <div class="col">
            <InputFile OnChange="LoadFiles" id="fileSelector" class="@((string.IsNullOrEmpty(errorMessage)? "form-control" : "form-control is-invalid"))" aria-describedby="fileSelectorFeedback" />
            <div id="fileSelectorFeedback" class="invalid-feedback">
                @errorMessage
            </div>
        </div>
    </div>
    @if (headers != null && headers.Any())
    {
        <CascadingValue Value="@editMode">
            <div class="row pt-5 justify-content-md-center">
                <div class="col">
                    <ZipFileComponent FileName="@fileName" Headers="headers" />
                </div>
            </div>
            <span>File processed in @duration</span>


            <svg @onclick="ToggleEditMode" height="48" viewBox="0 0 48 48" width="48" xmlns="http://www.w3.org/2000/svg"><path d="M6 34.5v7.5h7.5l22.13-22.13-7.5-7.5-22.13 22.13zm35.41-20.41c.78-.78.78-2.05 0-2.83l-4.67-4.67c-.78-.78-2.05-.78-2.83 0l-3.66 3.66 7.5 7.5 3.66-3.66z" /><path d="M0 0h48v48h-48z" fill="none" /></svg>


            @if (editMode)
            {
                <div>
                    <DownloadFileComponent Headers="headers" InputFile="inputFile" />
                </div>
            }
        </CascadingValue>
    }
</div>


@code
{
    private string? fileName;
    private string? errorMessage;
    private TimeSpan? duration;
    private IEnumerable<ZipAnalysis.ZipFormat.ZipHeaderBase>? headers;
    private IBrowserFile? inputFile;
    private bool editMode = false;

    private void ToggleEditMode() => editMode = !editMode;


    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        inputFile = e.File;
        fileName = e.File.Name;

        if (e.File.Size > ZipInspector.MaxSupportedSize)
        {
            errorMessage = $"File is too big. Only files up to {ZipInspector.MaxSupportedSize.ToReadableFileSize()} are supported.";
            headers = null;
            duration = null;
        }
        else
        {
            var sw = Stopwatch.StartNew();
            var fileStream = e.File.OpenReadStream(ZipInspector.MaxSupportedSize);
            var bufferStream = new BufferedStream(new FakeSeekableStream(fileStream), 512 * 1024); // Need fake seekable stream as BufferedStream mistakenly needs underlying stream to be seekable to get Position. (https://source.dot.net/#System.Private.CoreLib/src/libraries/System.Private.CoreLib/src/System/IO/BufferedStream.cs,197)

            headers = await new ZipInspector(bufferStream).GetZipHeadersAsync().ToListAsync();
            errorMessage = !headers.Any() ? "Please select a valid ZIP-file" : null;
            duration = sw.Elapsed;
        }
    }


}
