@page "/"
@using System.IO;
@using System.Diagnostics;
@using Zippy.Site.Extensions;
@using Zippy.ZipAnalysis;
@using Zippy.ZipAnalysis.IO;
@using Zippy.ZipAnalysis.Extensions;
@using Zippy.ZipAnalysis.ZipFormat;
@using Microsoft.AspNetCore.Components.Forms;


<div class="container">

    <div class="row">
        <div class="col">
            <InputFile OnChange="LoadFiles" id="fileSelector" class="@((string.IsNullOrEmpty(errorMessage)? "form-control" : "form-control is-invalid"))" aria-describedby="fileSelectorFeedback" accept=".zip" />
            <div id="fileSelectorFeedback" class="invalid-feedback">
                @errorMessage
            </div>
        </div>
    </div>

    @if (headers != null && headers.Any())
    {
        <div class="row pt-5">
            <div class="col">
                <div class="float-end">
                    <DownloadFileComponent Headers="headers" InputFile="inputFile" />
                    <img @onclick="() => editMode = !editMode" role="button" src="img/pencil-square.svg" alt="Edit" title="Go to edit mode" />
                </div>
            </div>
        </div>


        <CascadingValue Value="@editMode">
            <div class="row justify-content-md-center">
                <div class="col">
                    <ZipFileComponent FileName="@fileName" Headers="headers" />
                </div>
            </div>
            <span><small>File processed in @duration</small></span>
        </CascadingValue>
    }
</div>


@code
{
    private string? fileName;
    private string? errorMessage;
    private TimeSpan? duration;
    private IEnumerable<ZipAnalysis.ZipFormat.ZipHeaderBase>? headers;
    private IBrowserFile? inputFile;
    private bool editMode = false;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(10000);
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        inputFile = e.File;
        fileName = e.File.Name;

        if (e.File.Size > ZipInspector.MaxSupportedSize)
        {
            errorMessage = $"File is too big. Only files up to {ZipInspector.MaxSupportedSize.ToReadableFileSize()} are supported.";
            headers = null;
            duration = null;
        }
        else
        {
            var sw = Stopwatch.StartNew();
            var fileStream = e.File.OpenReadStream(ZipInspector.MaxSupportedSize);
            var bufferStream = new BufferedStream(new FakeSeekableStream(fileStream), 512 * 1024); // Need fake seekable stream as BufferedStream mistakenly needs underlying stream to be seekable to get Position. (https://source.dot.net/#System.Private.CoreLib/src/libraries/System.Private.CoreLib/src/System/IO/BufferedStream.cs,197)

            headers = await new ZipInspector(bufferStream).GetZipHeadersAsync().ToListAsync();
            errorMessage = !headers.Any() ? "Please select a valid ZIP-file" : null;
            duration = sw.Elapsed;
        }
    }
}
