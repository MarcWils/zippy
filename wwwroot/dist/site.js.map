{"version":3,"file":"site.js","mappings":"gHAEA,MAAaA,EACT,iBAAOC,GACH,OAAO,IAAID,CACf,CAEA,cAAWE,GACP,OAAuB,MAAhBC,KAAKC,OAChB,EAPJ,mB,gFCAA,iB,sFCFA,eACA,SACA,SAEA,oBAGI,WAAAC,CAAYC,GACRH,KAAKG,KAAOA,EACZH,KAAKI,SAAWD,EAAKE,IACzB,CAEO,QAAAC,GAGH,OAFkBN,KAAKG,KAAKI,MAAM,EAAG,GAEpBC,cACZC,MAAMC,GAAWV,KAAKW,kBAAkBD,IACjD,CAEQ,iBAAAC,CAAkBC,GACtB,OAAIZ,KAAKa,gBAAgB,EAAAC,gBAAgBF,UAAW,IAAIG,WAAWH,IACxDZ,KAAKgB,8BAELC,QAAQC,QAAQ,EAAArB,gBAAgBC,aAE/C,CAEQ,2BAAAkB,GAEJ,OADYhB,KAAKG,KAAKI,MAAM,EAAG,IACpBC,cACNC,MAAK,KACF,IAAIU,EAAS,IAAI,EAAAtB,gBAEjB,OADAsB,EAAOlB,QAAU,IAAI,EAAAmB,QACdD,CAAM,GAEzB,CAEQ,eAAAN,CAAgBQ,EAAeC,GACnC,OAAID,EAAEE,YAAcD,EAAEC,YAGfF,EAAEG,OAAM,CAACC,EAAKC,IAAMD,GAAOH,EAAEI,IACxC,E,wFC1CJ,MAAaZ,GAAb,oBAEW,EAAAF,UAAwBG,WAAWY,KAAK,CAAC,GAAI,GAAI,EAAG,G,GCD3DC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaE,QAGrB,IAAIC,EAASN,EAAyBE,GAAY,CAGjDG,QAAS,CAAC,GAOX,OAHAE,EAAoBL,GAAUI,EAAQA,EAAOD,QAASJ,GAG/CK,EAAOD,OACf,C,MCtBA,eAEMG,EAAoCC,SAASC,eAAe,mBAC5DC,EAAkBF,SAASC,eAAe,mBAE5CF,GACAA,EAAgBI,iBAAiB,UAAU,MAK/C,SAA2BC,GAGvB,GAFAF,EAAgBG,UAAUC,OAAO,UAEZ,IAAjBF,EAAMG,OAAgB,OAC1B,MAAM3C,EAAU,IAAI,EAAA4C,YAAYJ,EAAM,IAEtCJ,SAASC,eAAe,eAAeQ,UAAY7C,EAAQG,SAC3DH,EAAQK,WACHG,MAAKU,IACF,MAAM4B,EAAU5B,EAAOpB,WAAa,oBAAsB,oBAC1DsC,SAASC,eAAe,sBAAsBQ,UAAYC,CAAO,GAE7E,CAhBQC,CAAkBZ,EAAgBK,MAAM,G","sources":["webpack://zippy/./scripts/entities/detectionResult.ts","webpack://zippy/./scripts/entities/zipFile.ts","webpack://zippy/./scripts/zipAnalyzer.ts","webpack://zippy/./scripts/zipformat/localFileHeader.ts","webpack://zippy/webpack/bootstrap","webpack://zippy/./scripts/app.ts"],"sourcesContent":["import { ZipFile } from \"./zipFile\";\r\n\r\nexport class DetectionResult {\r\n    static invalidZip(): DetectionResult {\r\n        return new DetectionResult();\r\n    }\r\n\r\n    public get isValidZip(): boolean {\r\n        return this.zipFile != null;\r\n    }\r\n\r\n    public zipFile: ZipFile;\r\n}","import { ZipEntry } from \"./zipEntry\";\r\n\r\nexport class ZipFile {\r\n    Entries: ZipEntry[];\r\n}","import { DetectionResult } from \"./entities/detectionResult\";\r\nimport { ZipFile } from \"./entities/zipFile\";\r\nimport { LocalFileHeader } from \"./zipformat/localFileHeader\";\r\n\r\nexport class ZipAnalyzer {\r\n    file: File;\r\n    public fileName: string;\r\n    constructor(file: File) {\r\n        this.file = file;\r\n        this.fileName = file.name;\r\n    }\r\n\r\n    public validate(): Promise<DetectionResult> {\r\n        const signature = this.file.slice(0, 4);\r\n\r\n        return signature.arrayBuffer()\r\n            .then((buffer) => this.validateSignature(buffer));\r\n    }\r\n\r\n    private validateSignature(signature: ArrayBuffer): Promise<DetectionResult> {\r\n        if (this.signaturesMatch(LocalFileHeader.signature, new Uint8Array(signature))) {\r\n            return this.tryReadFirstLocalFileHeader();\r\n        } else {\r\n            return Promise.resolve(DetectionResult.invalidZip());\r\n        }\r\n    }\r\n\r\n    private tryReadFirstLocalFileHeader(): Promise<DetectionResult> {\r\n        const lfh = this.file.slice(0, 14);\r\n        return lfh.arrayBuffer()\r\n            .then(() => {\r\n                var result = new DetectionResult();\r\n                result.zipFile = new ZipFile();\r\n                return result;\r\n            });\r\n    }\r\n\r\n    private signaturesMatch(a: Uint8Array, b: Uint8Array): boolean {\r\n        if (a.byteLength != b.byteLength) {\r\n            return false;\r\n        }\r\n        return a.every((val, i) => val == b[i]);\r\n    }\r\n}","export class LocalFileHeader {\r\n\r\n    static signature: Uint8Array = Uint8Array.from([80, 75, 3, 4]);\r\n\r\n    VersionNeededToExtract: number;\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { ZipAnalyzer } from \"./zipAnalyzer\";\r\n\r\nconst zipFileSelector = <HTMLInputElement>document.getElementById('zipFileSelector');\r\nconst zipFileContents = document.getElementById('zipFileContents');\r\n\r\nif (zipFileSelector) {\r\n    zipFileSelector.addEventListener('change', () => {\r\n        onZipFileSelected(zipFileSelector.files);\r\n    });\r\n}\r\n\r\nfunction onZipFileSelected(files: FileList) {\r\n    zipFileContents.classList.remove('hidden');\r\n\r\n    if (files.length !== 1) { return; }\r\n    const zipFile = new ZipAnalyzer(files[0]);\r\n\r\n    document.getElementById('zipFileName').innerText = zipFile.fileName;\r\n    zipFile.validate()\r\n        .then(result => {\r\n            const outcome = result.isValidZip ? \"Valid ZIP archive\" : \"Not a ZIP archive\";\r\n            document.getElementById('zipDetectionResult').innerText = outcome;\r\n        });\r\n}\r\n"],"names":["DetectionResult","invalidZip","isValidZip","this","zipFile","constructor","file","fileName","name","validate","slice","arrayBuffer","then","buffer","validateSignature","signature","signaturesMatch","LocalFileHeader","Uint8Array","tryReadFirstLocalFileHeader","Promise","resolve","result","ZipFile","a","b","byteLength","every","val","i","from","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","zipFileSelector","document","getElementById","zipFileContents","addEventListener","files","classList","remove","length","ZipAnalyzer","innerText","outcome","onZipFileSelected"],"sourceRoot":""}